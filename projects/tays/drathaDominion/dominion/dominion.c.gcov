        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2996 returned 100% blocks executed 85%
        -:    8:int compare(const void *a, const void *b)
        -:    9:{
     2996:   10:    if (*(int *)a > *(int *)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   11:        return 1;
     2996:   12:    if (*(int *)a < *(int *)b)
branch  0 taken 36%
branch  1 taken 64%
     1070:   13:        return -1;
     1926:   14:    return 0;
     2996:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
        -:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:    struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:    return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:    int *k = malloc(10 * sizeof(int));
    #####:   27:    k[0] = k1;
    #####:   28:    k[1] = k2;
    #####:   29:    k[2] = k3;
    #####:   30:    k[3] = k4;
    #####:   31:    k[4] = k5;
    #####:   32:    k[5] = k6;
    #####:   33:    k[6] = k7;
    #####:   34:    k[7] = k8;
    #####:   35:    k[8] = k9;
    #####:   36:    k[9] = k10;
    #####:   37:    return k;
        -:   38:}
        -:   39:
function initializeGame called 107 returned 100% blocks executed 87%
        -:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:    int i;
        -:   44:    int j;
        -:   45:    int it;
        -:   46:
        -:   47:    //set up random number generator
      107:   48:    SelectStream(1);
      107:   49:    PutSeed((long)randomSeed);
        -:   50:
        -:   51:    //check number of players
      214:   52:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   53:    {
    #####:   54:        return -1;
        -:   55:    }
        -:   56:
        -:   57:    //set number of players
      107:   58:    state->numPlayers = numPlayers;
        -:   59:
        -:   60:    //check selected kingdom cards are different
     2354:   61:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:    {
    23540:   63:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   64:        {
    20330:   65:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   66:            {
    #####:   67:                return -1;
        -:   68:            }
    10700:   69:        }
     1070:   70:    }
        -:   71:
        -:   72:    //initialize supply
        -:   73:    ///////////////////////////////
        -:   74:
        -:   75:    //set number of Curse cards
      107:   76:    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   77:    {
      107:   78:        state->supplyCount[curse] = 10;
      107:   79:    }
    #####:   80:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:    {
    #####:   82:        state->supplyCount[curse] = 20;
    #####:   83:    }
        -:   84:    else
        -:   85:    {
    #####:   86:        state->supplyCount[curse] = 30;
        -:   87:    }
        -:   88:
        -:   89:    //set number of Victory cards
      107:   90:    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   91:    {
      107:   92:        state->supplyCount[estate] = 8;
      107:   93:        state->supplyCount[duchy] = 8;
      107:   94:        state->supplyCount[province] = 8;
      107:   95:    }
        -:   96:    else
        -:   97:    {
    #####:   98:        state->supplyCount[estate] = 12;
    #####:   99:        state->supplyCount[duchy] = 12;
    #####:  100:        state->supplyCount[province] = 12;
        -:  101:    }
        -:  102:
        -:  103:    //set number of Treasure cards
      107:  104:    state->supplyCount[copper] = 60 - (7 * numPlayers);
      107:  105:    state->supplyCount[silver] = 40;
      107:  106:    state->supplyCount[gold] = 30;
        -:  107:
        -:  108:    //set number of Kingdom cards
     4494:  109:    for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  110:    {
    35310:  111:        for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  112:        {
    16585:  113:            if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  114:            {
        -:  115:                //check if card is a 'Victory' Kingdom card
     2140:  116:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 90%
        -:  117:                {
      107:  118:                    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:  119:                    {
      107:  120:                        state->supplyCount[i] = 8;
      107:  121:                    }
        -:  122:                    else
        -:  123:                    {
    #####:  124:                        state->supplyCount[i] = 12;
        -:  125:                    }
      107:  126:                }
        -:  127:                else
        -:  128:                {
      963:  129:                    state->supplyCount[i] = 10;
        -:  130:                }
     1070:  131:                break;
        -:  132:            }
        -:  133:            else //card is not in the set choosen for the game
        -:  134:            {
    15515:  135:                state->supplyCount[i] = -1;
        -:  136:            }
    15515:  137:        }
     2140:  138:    }
        -:  139:
        -:  140:    ////////////////////////
        -:  141:    //supply intilization complete
        -:  142:
        -:  143:    //set player decks
      642:  144:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  145:    {
      214:  146:        state->deckCount[i] = 0;
     1712:  147:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  148:        {
      642:  149:            state->deck[i][j] = estate;
      642:  150:            state->deckCount[i]++;
      642:  151:        }
     3424:  152:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  153:        {
     1498:  154:            state->deck[i][j] = copper;
     1498:  155:            state->deckCount[i]++;
     1498:  156:        }
      214:  157:    }
        -:  158:
        -:  159:    //shuffle player decks
      642:  160:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  161:    {
      214:  162:        if (shuffle(i, state) < 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  163:        {
    #####:  164:            return -1;
        -:  165:        }
      214:  166:    }
        -:  167:
        -:  168:    //draw player hands
      642:  169:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  170:    {
        -:  171:        //initialize hand size to zero
      214:  172:        state->handCount[i] = 0;
      214:  173:        state->discardCount[i] = 0;
        -:  174:        //draw 5 cards
        -:  175:        // for (j = 0; j < 5; j++)
        -:  176:        //	{
        -:  177:        //	  drawCard(i, state);
        -:  178:        //	}
      214:  179:    }
        -:  180:
        -:  181:    //set embargo tokens to 0 for all supply piles
     5992:  182:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  183:    {
     2889:  184:        state->embargoTokens[i] = 0;
     2889:  185:    }
        -:  186:
        -:  187:    //initialize first player's turn
      107:  188:    state->outpostPlayed = 0;
      107:  189:    state->phase = 0;
      107:  190:    state->numActions = 1;
      107:  191:    state->numBuys = 1;
      107:  192:    state->playedCardCount = 0;
      107:  193:    state->whoseTurn = 0;
      107:  194:    state->handCount[state->whoseTurn] = 0;
        -:  195:    //int it; move to top
        -:  196:
        -:  197:    //Moved draw cards to here, only drawing at the start of a turn
     1284:  198:    for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17%
        -:  199:    {
      535:  200:        drawCard(state->whoseTurn, state);
      535:  201:    }
        -:  202:
      107:  203:    updateCoins(state->whoseTurn, state, 0);
        -:  204:
      107:  205:    return 0;
      107:  206:}
        -:  207:
function shuffle called 315 returned 100% blocks executed 100%
        -:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:    int newDeck[MAX_DECK];
      315:  212:    int newDeckPos = 0;
        -:  213:    int card;
        -:  214:    int i;
        -:  215:
      315:  216:    if (state->deckCount[player] < 1)
branch  0 taken 32%
branch  1 taken 68%
      101:  217:        return -1;
      214:  218:    qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
     4708:  221:    while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9%
        -:  222:    {
     2140:  223:        card = floor(Random() * state->deckCount[player]);
     2140:  224:        newDeck[newDeckPos] = state->deck[player][card];
     2140:  225:        newDeckPos++;
    16478:  226:        for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 74%
branch  1 taken 26%
        -:  227:        {
     6099:  228:            state->deck[player][i] = state->deck[player][i + 1];
     6099:  229:        }
     2140:  230:        state->deckCount[player]--;
        -:  231:    }
     4708:  232:    for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  233:    {
     2140:  234:        state->deck[player][i] = newDeck[i];
     2140:  235:        state->deckCount[player]++;
     2140:  236:    }
        -:  237:
      214:  238:    return 0;
      315:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
        -:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:    int card;
    #####:  244:    int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:    //check if it is the right phase
    #####:  247:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:    {
    #####:  249:        return -1;
        -:  250:    }
        -:  251:
        -:  252:    //check if player has enough actions
    #####:  253:    if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:    {
    #####:  255:        return -1;
        -:  256:    }
        -:  257:
        -:  258:    //get card played
    #####:  259:    card = handCard(handPos, state);
        -:  260:
        -:  261:    //check if selected card is an action
    #####:  262:    if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:    {
    #####:  264:        return -1;
        -:  265:    }
        -:  266:
        -:  267:    //play card
    #####:  268:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
branch  0 never executed
branch  1 never executed
        -:  269:    {
    #####:  270:        return -1;
        -:  271:    }
        -:  272:
        -:  273:    //reduce number of actions
    #####:  274:    state->numActions--;
        -:  275:
        -:  276:    //update coins (Treasure cards may be added with card draws)
    #####:  277:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:    return 0;
    #####:  280:}
        -:  281:
function buyCard called 0 returned 0% blocks executed 0%
        -:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:    int who;
        -:  285:    if (DEBUG)
        -:  286:    {
        -:  287:        printf("Entering buyCard...\n");
        -:  288:    }
        -:  289:
        -:  290:    // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:    who = state->whoseTurn;
        -:  293:
    #####:  294:    if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  295:    {
        -:  296:        if (DEBUG)
        -:  297:            printf("You do not have any buys left\n");
    #####:  298:        return -1;
        -:  299:    }
    #####:  300:    else if (supplyCount(supplyPos, state) < 1)
branch  0 never executed
branch  1 never executed
        -:  301:    {
        -:  302:        if (DEBUG)
        -:  303:            printf("There are not any of that type of card left\n");
    #####:  304:        return -1;
        -:  305:    }
    #####:  306:    else if (state->coins < getCost(supplyPos))
branch  0 never executed
branch  1 never executed
        -:  307:    {
        -:  308:        if (DEBUG)
        -:  309:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:        return -1;
        -:  311:    }
        -:  312:    else
        -:  313:    {
    #####:  314:        state->phase = 1;
        -:  315:        //state->supplyCount[supplyPos]--;
    #####:  316:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:        state->numBuys--;
        -:  320:        if (DEBUG)
        -:  321:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:    }
        -:  323:
        -:  324:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:    //state->discardCount[who]++;
        -:  326:
    #####:  327:    return 0;
    #####:  328:}
        -:  329:
function numHandCards called 407 returned 100% blocks executed 100%
        -:  330:int numHandCards(struct gameState *state)
        -:  331:{
      407:  332:    return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
function handCard called 0 returned 0% blocks executed 0%
        -:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:    int currentPlayer = whoseTurn(state);
    #####:  338:    return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 899 returned 100% blocks executed 100%
        -:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
      899:  343:    return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:    int i;
    #####:  349:    int count = 0;
        -:  350:
    #####:  351:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:    {
    #####:  353:        if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:            count++;
    #####:  355:    }
        -:  356:
    #####:  357:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:    {
    #####:  359:        if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:            count++;
    #####:  361:    }
        -:  362:
    #####:  363:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:    {
    #####:  365:        if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:            count++;
    #####:  367:    }
        -:  368:
    #####:  369:    return count;
        -:  370:}
        -:  371:
function whoseTurn called 1319 returned 100% blocks executed 100%
        -:  372:int whoseTurn(struct gameState *state)
        -:  373:{
     1319:  374:    return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
        -:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:    int k;
        -:  380:    int i;
    #####:  381:    int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:    //Discard hand
    #####:  384:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:    {
    #####:  386:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:        state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
    #####:  388:    }
    #####:  389:    state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:    //Code for determining the player
    #####:  392:    if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:    {
    #####:  394:        state->whoseTurn = currentPlayer + 1; //Still safe to increment
    #####:  395:    }
        -:  396:    else
        -:  397:    {
    #####:  398:        state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:    }
        -:  400:
    #####:  401:    state->outpostPlayed = 0;
    #####:  402:    state->phase = 0;
    #####:  403:    state->numActions = 1;
    #####:  404:    state->coins = 0;
    #####:  405:    state->numBuys = 1;
    #####:  406:    state->playedCardCount = 0;
    #####:  407:    state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:    //int k; move to top
        -:  410:    //Next player draws hand
    #####:  411:    for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        drawCard(state->whoseTurn, state); //Draw a card
    #####:  414:    }
        -:  415:
        -:  416:    //Update money
    #####:  417:    updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:    return 0;
        -:  420:}
        -:  421:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:    int i;
        -:  425:    int j;
        -:  426:
        -:  427:    //if stack of Province cards is empty, the game ends
    #####:  428:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  429:    {
    #####:  430:        return 1;
        -:  431:    }
        -:  432:
        -:  433:    //if three supply pile are at 0, the game ends
    #####:  434:    j = 0;
    #####:  435:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  438:        {
    #####:  439:            j++;
    #####:  440:        }
    #####:  441:    }
    #####:  442:    if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  443:    {
    #####:  444:        return 1;
        -:  445:    }
        -:  446:
    #####:  447:    return 0;
    #####:  448:}
        -:  449:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:    int i;
    #####:  454:    int score = 0;
        -:  455:    //score from hand
    #####:  456:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:    {
    #####:  458:        if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  459:        {
    #####:  460:            score = score - 1;
    #####:  461:        };
    #####:  462:        if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  463:        {
    #####:  464:            score = score + 1;
    #####:  465:        };
    #####:  466:        if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  467:        {
    #####:  468:            score = score + 3;
    #####:  469:        };
    #####:  470:        if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  471:        {
    #####:  472:            score = score + 6;
    #####:  473:        };
    #####:  474:        if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  475:        {
    #####:  476:            score = score + 1;
    #####:  477:        };
    #####:  478:        if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  479:        {
    #####:  480:            score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  481:        };
    #####:  482:    }
        -:  483:
        -:  484:    //score from discard
    #####:  485:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  486:    {
    #####:  487:        if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:        {
    #####:  489:            score = score - 1;
    #####:  490:        };
    #####:  491:        if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:        {
    #####:  493:            score = score + 1;
    #####:  494:        };
    #####:  495:        if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:        {
    #####:  497:            score = score + 3;
    #####:  498:        };
    #####:  499:        if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:        {
    #####:  501:            score = score + 6;
    #####:  502:        };
    #####:  503:        if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:        {
    #####:  505:            score = score + 1;
    #####:  506:        };
    #####:  507:        if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:        {
    #####:  509:            score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  510:        };
    #####:  511:    }
        -:  512:
        -:  513:    //score from deck
    #####:  514:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  515:    {
    #####:  516:        if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:        {
    #####:  518:            score = score - 1;
    #####:  519:        };
    #####:  520:        if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:        {
    #####:  522:            score = score + 1;
    #####:  523:        };
    #####:  524:        if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:        {
    #####:  526:            score = score + 3;
    #####:  527:        };
    #####:  528:        if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:        {
    #####:  530:            score = score + 6;
    #####:  531:        };
    #####:  532:        if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:        {
    #####:  534:            score = score + 1;
    #####:  535:        };
    #####:  536:        if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:        {
    #####:  538:            score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  539:        };
    #####:  540:    }
        -:  541:
    #####:  542:    return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
        -:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:    int i;
        -:  548:    int j;
        -:  549:    int highScore;
        -:  550:    int currentPlayer;
        -:  551:
        -:  552:    //get score for each player
    #####:  553:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:    {
        -:  555:        //set unused player scores to -9999
    #####:  556:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:        {
    #####:  558:            players[i] = -9999;
    #####:  559:        }
        -:  560:        else
        -:  561:        {
    #####:  562:            players[i] = scoreFor(i, state);
        -:  563:        }
    #####:  564:    }
        -:  565:
        -:  566:    //find highest score
    #####:  567:    j = 0;
    #####:  568:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:    {
    #####:  570:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:        {
    #####:  572:            j = i;
    #####:  573:        }
    #####:  574:    }
    #####:  575:    highScore = players[j];
        -:  576:
        -:  577:    //add 1 to players who had less turns
    #####:  578:    currentPlayer = whoseTurn(state);
    #####:  579:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:    {
    #####:  581:        if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:        {
    #####:  583:            players[i]++;
    #####:  584:        }
    #####:  585:    }
        -:  586:
        -:  587:    //find new highest score
    #####:  588:    j = 0;
    #####:  589:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:    {
    #####:  591:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:        {
    #####:  593:            j = i;
    #####:  594:        }
    #####:  595:    }
    #####:  596:    highScore = players[j];
        -:  597:
        -:  598:    //set winners in array to 1 and rest to 0
    #####:  599:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:    {
    #####:  601:        if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:        {
    #####:  603:            players[i] = 1;
    #####:  604:        }
        -:  605:        else
        -:  606:        {
    #####:  607:            players[i] = 0;
        -:  608:        }
    #####:  609:    }
        -:  610:
    #####:  611:    return 0;
        -:  612:}
        -:  613:
function drawCard called 1743 returned 100% blocks executed 75%
        -:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:    int count;
        -:  617:    int deckCounter;
     1743:  618:    if (state->deckCount[player] <= 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  619:    { //Deck is empty
        -:  620:
        -:  621:        //Step 1 Shuffle the discard pile back into a deck
        -:  622:        int i;
        -:  623:        //Move discard to deck
      202:  624:        for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100%
        -:  625:        {
    #####:  626:            state->deck[player][i] = state->discard[player][i];
    #####:  627:            state->discard[player][i] = -1;
    #####:  628:        }
        -:  629:
      101:  630:        state->deckCount[player] = state->discardCount[player];
      101:  631:        state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:        //Shufffle the deck
      101:  634:        shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:        if (DEBUG)
        -:  637:        { //Debug statements
        -:  638:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:        }
        -:  640:
      101:  641:        state->discardCount[player] = 0;
        -:  642:
        -:  643:        //Step 2 Draw Card
      101:  644:        count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:        if (DEBUG)
        -:  647:        { //Debug statements
        -:  648:            printf("Current hand count: %d\n", count);
        -:  649:        }
        -:  650:
      101:  651:        deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
      101:  653:        if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
      101:  654:            return -1;
        -:  655:
    #####:  656:        state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:        state->deckCount[player]--;
    #####:  658:        state->handCount[player]++; //Increment hand count
    #####:  659:    }
        -:  660:
        -:  661:    else
        -:  662:    {
     1642:  663:        int count = state->handCount[player]; //Get current hand count for player
        -:  664:        int deckCounter;
        -:  665:        if (DEBUG)
        -:  666:        { //Debug statements
        -:  667:            printf("Current hand count: %d\n", count);
        -:  668:        }
        -:  669:
     1642:  670:        deckCounter = state->deckCount[player];                            //Create holder for the deck count
     1642:  671:        state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
     1642:  672:        state->deckCount[player]--;
     1642:  673:        state->handCount[player]++; //Increment hand count
        -:  674:    }
        -:  675:
     1642:  676:    return 0;
     1743:  677:}
        -:  678:
function getCost called 12 returned 100% blocks executed 19%
        -:  679:int getCost(int cardNumber)
        -:  680:{
       12:  681:    switch (cardNumber)
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 25%
branch  5 taken 25%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  682:    {
        -:  683:    case curse:
    #####:  684:        return 0;
        -:  685:    case estate:
    #####:  686:        return 2;
        -:  687:    case duchy:
    #####:  688:        return 5;
        -:  689:    case province:
    #####:  690:        return 8;
        -:  691:    case copper:
        3:  692:        return 0;
        -:  693:    case silver:
        3:  694:        return 3;
        -:  695:    case gold:
        6:  696:        return 6;
        -:  697:    case adventurer:
    #####:  698:        return 6;
        -:  699:    case council_room:
    #####:  700:        return 5;
        -:  701:    case feast:
    #####:  702:        return 4;
        -:  703:    case gardens:
    #####:  704:        return 4;
        -:  705:    case mine:
    #####:  706:        return 5;
        -:  707:    case remodel:
    #####:  708:        return 4;
        -:  709:    case smithy:
    #####:  710:        return 4;
        -:  711:    case village:
    #####:  712:        return 3;
        -:  713:    case baron:
    #####:  714:        return 4;
        -:  715:    case great_hall:
    #####:  716:        return 3;
        -:  717:    case minion:
    #####:  718:        return 5;
        -:  719:    case steward:
    #####:  720:        return 3;
        -:  721:    case tribute:
    #####:  722:        return 5;
        -:  723:    case ambassador:
    #####:  724:        return 3;
        -:  725:    case cutpurse:
    #####:  726:        return 4;
        -:  727:    case embargo:
    #####:  728:        return 2;
        -:  729:    case outpost:
    #####:  730:        return 5;
        -:  731:    case salvager:
    #####:  732:        return 4;
        -:  733:    case sea_hag:
    #####:  734:        return 4;
        -:  735:    case treasure_map:
    #####:  736:        return 4;
        -:  737:    }
        -:  738:
    #####:  739:    return -1;
       12:  740:}
        -:  741:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:    int i;
        -:  745:    int j;
        -:  746:    int k;
        -:  747:    int x;
        -:  748:    int index;
    #####:  749:    int currentPlayer = whoseTurn(state);
    #####:  750:    int nextPlayer = currentPlayer + 1;
        -:  751:
        -:  752:    
        -:  753:    int temphand[MAX_HAND]; // moved above the if statement
    #####:  754:    int drawntreasure = 0;
        -:  755:    int cardDrawn;
    #####:  756:    int z = 0; // this is the counter for the temp hand
    #####:  757:    if (nextPlayer > (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  758:    {
    #####:  759:        nextPlayer = 0;
    #####:  760:    }
        -:  761:
        -:  762:    //uses switch to select card and perform actions
    #####:  763:    switch (card)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  764:    {
        -:  765:    case adventurer:
    #####:  766:        while (drawntreasure < 2)
branch  0 never executed
branch  1 never executed
        -:  767:        {
    #####:  768:            if (state->deckCount[currentPlayer] < 1)
branch  0 never executed
branch  1 never executed
        -:  769:            { //if the deck is empty we need to shuffle discard and add to deck
    #####:  770:                shuffle(currentPlayer, state);
    #####:  771:            }
    #####:  772:            drawCard(currentPlayer, state);
    #####:  773:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####:  774:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  775:                drawntreasure++;
        -:  776:            else
        -:  777:            {
    #####:  778:                temphand[z] = cardDrawn;
    #####:  779:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  780:                z++;
        -:  781:            }
        -:  782:        }
    #####:  783:        while (z - 1 >= 0)
branch  0 never executed
branch  1 never executed
        -:  784:        {
    #####:  785:            state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  786:            z = z - 1;
        -:  787:        }
    #####:  788:        return 0;
        -:  789:
        -:  790:    case council_room:
        -:  791:        //+4 Cards
    #####:  792:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  793:        {
    #####:  794:            drawCard(currentPlayer, state);
    #####:  795:        }
        -:  796:
        -:  797:        //+1 Buy
    #####:  798:        state->numBuys++;
        -:  799:
        -:  800:        //Each other player draws a card
    #####:  801:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  802:        {
    #####:  803:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  804:            {
    #####:  805:                drawCard(i, state);
    #####:  806:            }
    #####:  807:        }
        -:  808:
        -:  809:        //put played card in played card pile
    #####:  810:        discardCard(handPos, currentPlayer, state, 0);
        -:  811:
    #####:  812:        return 0;
        -:  813:
        -:  814:    case feast:
        -:  815:        //gain card with cost up to 5
        -:  816:        //Backup hand
    #####:  817:        for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  818:        {
    #####:  819:            temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  820:            state->hand[currentPlayer][i] = -1;          //Set to nothing
    #####:  821:        }
        -:  822:        //Backup hand
        -:  823:
        -:  824:        //Update Coins for Buy
    #####:  825:        updateCoins(currentPlayer, state, 5);
    #####:  826:        x = 1; //Condition to loop on
    #####:  827:        while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  828:        { //Buy one card
    #####:  829:            if (supplyCount(choice1, state) <= 0)
branch  0 never executed
branch  1 never executed
        -:  830:            {
        -:  831:                if (DEBUG)
        -:  832:                    printf("None of that card left, sorry!\n");
        -:  833:
        -:  834:                if (DEBUG)
        -:  835:                {
        -:  836:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  837:                }
    #####:  838:            }
    #####:  839:            else if (state->coins < getCost(choice1))
branch  0 never executed
branch  1 never executed
        -:  840:            {
    #####:  841:                printf("That card is too expensive!\n");
        -:  842:
        -:  843:                if (DEBUG)
        -:  844:                {
        -:  845:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  846:                }
    #####:  847:            }
        -:  848:            else
        -:  849:            {
        -:  850:
        -:  851:                if (DEBUG)
        -:  852:                {
        -:  853:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  854:                }
        -:  855:
    #####:  856:                gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  857:                x = 0;                                      //No more buying cards
        -:  858:
        -:  859:                if (DEBUG)
        -:  860:                {
        -:  861:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  862:                }
        -:  863:            }
        -:  864:        }
        -:  865:
        -:  866:        //Reset Hand
    #####:  867:        for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  868:        {
    #####:  869:            state->hand[currentPlayer][i] = temphand[i];
    #####:  870:            temphand[i] = -1;
    #####:  871:        }
        -:  872:        //Reset Hand
        -:  873:
    #####:  874:        return 0;
        -:  875:
        -:  876:    case gardens:
    #####:  877:        return -1;
        -:  878:
        -:  879:    case mine:
    #####:  880:        return mineCard(choice1, choice2, state, handPos);
        -:  881:
        -:  882:    case remodel:
    #####:  883:        j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  884:
    #####:  885:        if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
branch  0 never executed
branch  1 never executed
        -:  886:        {
    #####:  887:            return -1;
        -:  888:        }
        -:  889:
    #####:  890:        gainCard(choice2, state, 0, currentPlayer);
        -:  891:
        -:  892:        //discard card from hand
    #####:  893:        discardCard(handPos, currentPlayer, state, 0);
        -:  894:
        -:  895:        //discard trashed card
    #####:  896:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  897:        {
    #####:  898:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  899:            {
    #####:  900:                discardCard(i, currentPlayer, state, 0);
    #####:  901:                break;
        -:  902:            }
    #####:  903:        }
        -:  904:
    #####:  905:        return 0;
        -:  906:
        -:  907:    case smithy:
        -:  908:        //+3 Cards
    #####:  909:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  910:        {
    #####:  911:            drawCard(currentPlayer, state);
    #####:  912:        }
        -:  913:
        -:  914:        //discard card from hand
    #####:  915:        discardCard(handPos, currentPlayer, state, 0);
    #####:  916:        return 0;
        -:  917:
        -:  918:    case village:
        -:  919:        //+1 Card
    #####:  920:        drawCard(currentPlayer, state);
        -:  921:
        -:  922:        //+2 Actions
    #####:  923:        state->numActions = state->numActions + 2;
        -:  924:
        -:  925:        //discard played card from hand
    #####:  926:        discardCard(handPos, currentPlayer, state, 0);
    #####:  927:        return 0;
        -:  928:
        -:  929:    case baron:
    #####:  930:        return baronCard(choice1, state);
        -:  931:
        -:  932:    case great_hall:
        -:  933:        //+1 Card
    #####:  934:        drawCard(currentPlayer, state);
        -:  935:
        -:  936:        //+1 Actions
    #####:  937:        state->numActions++;
        -:  938:
        -:  939:        //discard card from hand
    #####:  940:        discardCard(handPos, currentPlayer, state, 0);
    #####:  941:        return 0;
        -:  942:
        -:  943:    case minion:
    #####:  944:        return minionCard(choice1, choice2, state, handPos);
        -:  945:
        -:  946:    case steward:
    #####:  947:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  948:        {
        -:  949:            //+2 cards
    #####:  950:            drawCard(currentPlayer, state);
    #####:  951:            drawCard(currentPlayer, state);
    #####:  952:        }
    #####:  953:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  954:        {
        -:  955:            //+2 coins
    #####:  956:            state->coins = state->coins + 2;
    #####:  957:        }
        -:  958:        else
        -:  959:        {
        -:  960:            //trash 2 cards in hand
    #####:  961:            discardCard(choice2, currentPlayer, state, 1);
    #####:  962:            discardCard(choice3, currentPlayer, state, 1);
        -:  963:        }
        -:  964:
        -:  965:        //discard card from hand
    #####:  966:        discardCard(handPos, currentPlayer, state, 0);
    #####:  967:        return 0;
        -:  968:
        -:  969:    case tribute:
    #####:  970:        return tributeCard(state);
        -:  971:
        -:  972:    case ambassador:
    #####:  973:        return ambassadorCard(choice1, choice2, state, handPos);
        -:  974:
        -:  975:    case cutpurse:
        -:  976:
    #####:  977:        updateCoins(currentPlayer, state, 2);
    #####:  978:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:        {
    #####:  980:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:            {
    #####:  982:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  983:                {
    #####:  984:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  985:                    {
    #####:  986:                        discardCard(j, i, state, 0);
    #####:  987:                        break;
        -:  988:                    }
    #####:  989:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  990:                    {
    #####:  991:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  992:                        {
        -:  993:                            if (DEBUG)
        -:  994:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  995:                        }
    #####:  996:                        break;
        -:  997:                    }
    #####:  998:                }
    #####:  999:            }
    #####: 1000:        }
        -: 1001:
        -: 1002:        //discard played card from hand
    #####: 1003:        discardCard(handPos, currentPlayer, state, 0);
        -: 1004:
    #####: 1005:        return 0;
        -: 1006:
        -: 1007:    case embargo:
        -: 1008:        //+2 Coins
    #####: 1009:        state->coins = state->coins + 2;
        -: 1010:
        -: 1011:        //see if selected pile is in play
    #####: 1012:        if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1013:        {
    #####: 1014:            return -1;
        -: 1015:        }
        -: 1016:
        -: 1017:        //add embargo token to selected supply pile
    #####: 1018:        state->embargoTokens[choice1]++;
        -: 1019:
        -: 1020:        //trash card
    #####: 1021:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1022:        return 0;
        -: 1023:
        -: 1024:    case outpost:
        -: 1025:        //set outpost flag
    #####: 1026:        state->outpostPlayed++;
        -: 1027:
        -: 1028:        //discard card
    #####: 1029:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:        return 0;
        -: 1031:
        -: 1032:    case salvager:
        -: 1033:        //+1 buy
    #####: 1034:        state->numBuys++;
        -: 1035:
    #####: 1036:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1037:        {
        -: 1038:            //gain coins equal to trashed card
    #####: 1039:            state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1040:            //trash card
    #####: 1041:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1042:        }
        -: 1043:
        -: 1044:        //discard card
    #####: 1045:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1046:        return 0;
        -: 1047:
        -: 1048:    case sea_hag:
    #####: 1049:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1050:        {
    #####: 1051:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1052:            {
    #####: 1053:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1054:                state->deckCount[i]--;
    #####: 1055:                state->discardCount[i]++;
    #####: 1056:                state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
    #####: 1057:            }
    #####: 1058:        }
    #####: 1059:        return 0;
        -: 1060:
        -: 1061:    case treasure_map:
        -: 1062:        //search hand for another treasure_map
    #####: 1063:        index = -1;
    #####: 1064:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1065:        {
    #####: 1066:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1067:            {
    #####: 1068:                index = i;
    #####: 1069:                break;
        -: 1070:            }
    #####: 1071:        }
    #####: 1072:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1073:        {
        -: 1074:            //trash both treasure cards
    #####: 1075:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1076:            discardCard(index, currentPlayer, state, 1);
        -: 1077:
        -: 1078:            //gain 4 Gold cards
    #####: 1079:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:            {
    #####: 1081:                gainCard(gold, state, 1, currentPlayer);
    #####: 1082:            }
        -: 1083:
        -: 1084:            //return success
    #####: 1085:            return 1;
        -: 1086:        }
        -: 1087:
        -: 1088:        //no second treasure_map found in hand
    #####: 1089:        return -1;
        -: 1090:    }
        -: 1091:
    #####: 1092:    return -1;
    #####: 1093:}
        -: 1094:
        -: 1095:/* Refractored implementation for the baron card */
function baronCard called 303 returned 100% blocks executed 76%
        -: 1096:int baronCard(int choice1, struct gameState *state)
        -: 1097:{
      303: 1098:    int currentPlayer = whoseTurn(state);
        -: 1099:    
      303: 1100:    state->numBuys++; //Increase buys by 1!
      303: 1101:    if (choice1 > 0)
branch  0 taken 100%
branch  1 taken 0%
        -: 1102:    {                               //Boolean true or going to discard an estate
      303: 1103:        int p = 0;                  //Iterator for hand!
      303: 1104:        int card_not_discarded = 1; //Flag for discard set!
     4234: 1105:        while (card_not_discarded)
branch  0 taken 86%
branch  1 taken 14%
        -: 1106:        {
     1814: 1107:            if (state->hand[currentPlayer][p] == estate)
branch  0 taken 1%
branch  1 taken 99%
        -: 1108:            {                      //Found an estate card!
        4: 1109:                state->coins += 10; //Add 4 coins to the amount of coins (bug: adds 10 instead of 4)
        4: 1110:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        4: 1111:                state->discardCount[currentPlayer]++;
       16: 1112:                for (; p < state->handCount[currentPlayer]; p++)
branch  0 taken 50%
branch  1 taken 50%
        -: 1113:                {
        4: 1114:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        4: 1115:                }
        4: 1116:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        4: 1117:                state->handCount[currentPlayer]--;
        4: 1118:                card_not_discarded = 0; //Exit the loop
        4: 1119:            }
     1810: 1120:            else if (p > state->handCount[currentPlayer])
branch  0 taken 17%
branch  1 taken 83%
        -: 1121:            {
        -: 1122:                if (DEBUG)
        -: 1123:                {
        -: 1124:                    printf("No estate cards in your hand, invalid choice\n");
        -: 1125:                    printf("Must gain an estate if there are any\n");
        -: 1126:                }
      299: 1127:                if (supplyCount(estate, state) > 0)
branch  0 taken 100%
branch  1 taken 0%
        -: 1128:                {
      299: 1129:                    gainCard(estate, state, 0, currentPlayer);
        -: 1130:
      299: 1131:                    state->supplyCount[estate]++; //Decrement estates (bug: increments instead of decrements)
      299: 1132:                    if (supplyCount(estate, state) == 0)
branch  0 taken 0%
branch  1 taken 100%
        -: 1133:                    {
    #####: 1134:                        isGameOver(state);
    #####: 1135:                    }
      299: 1136:                }
      299: 1137:                card_not_discarded = 0; //Exit the loop
      299: 1138:            }
        -: 1139:
        -: 1140:            else
        -: 1141:            {
     1511: 1142:                p++; //Next card
        -: 1143:            }
        -: 1144:        }
      303: 1145:    }
        -: 1146:
        -: 1147:    else
        -: 1148:    {
    #####: 1149:        if (supplyCount(estate, state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1150:        {
    #####: 1151:            gainCard(estate, state, 0, currentPlayer); //Gain an estate
        -: 1152:
    #####: 1153:            state->supplyCount[estate]--; //Decrement Estates
    #####: 1154:            if (supplyCount(estate, state) == 0)
branch  0 never executed
branch  1 never executed
        -: 1155:            {
    #####: 1156:                isGameOver(state);
    #####: 1157:            }
    #####: 1158:        }
        -: 1159:    }
        -: 1160:
      303: 1161:    return 0;
        -: 1162:}
        -: 1163:
        -: 1164:/* Refractored implementation for the minion card */
function minionCard called 202 returned 100% blocks executed 100%
        -: 1165:int minionCard(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1166:{
      202: 1167:    int currentPlayer = whoseTurn(state);
        -: 1168:    int i;
        -: 1169:    int j;
        -: 1170:
        -: 1171:    //+1 action
      202: 1172:    state->numActions++;
        -: 1173:
        -: 1174:    //discard card from hand
      202: 1175:    discardCard(handPos, currentPlayer, state, 0);
        -: 1176:
      202: 1177:    if (choice1)
branch  0 taken 50%
branch  1 taken 50%
        -: 1178:    {
      101: 1179:        state->coins = state->coins + 2;
      101: 1180:    }
      101: 1181:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100%
branch  1 taken 0%
        -: 1182:    {
        -: 1183:        //discard hand
      808: 1184:        while (numHandCards(state) > 1) //(bug: changed the number of cards that the player is allowed
branch  0 taken 75%
branch  1 taken 25%
        -: 1185:                                        //      keep when discarding their hand from 0 to 1)
        -: 1186:        {
      303: 1187:            discardCard(handPos, currentPlayer, state, 0);
        -: 1188:        }
        -: 1189:
        -: 1190:        //draw 4
     1414: 1191:        for (i = 0; i <= 5; i++) //(bug: changed < to <=)
branch  0 taken 86%
branch  1 taken 14%
        -: 1192:        {
      606: 1193:            drawCard(currentPlayer, state);
      606: 1194:        }
        -: 1195:
        -: 1196:        //other players discard hand and redraw if hand size > 4
      606: 1197:        for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -: 1198:        {
      202: 1199:            if (i != currentPlayer)
branch  0 taken 50%
branch  1 taken 50%
        -: 1200:            {
      101: 1201:                if (state->handCount[i] > 4)
branch  0 taken 49%
branch  1 taken 51%
        -: 1202:                {
        -: 1203:                    //discard hand
      876: 1204:                    while (state->handCount[i] > 0)
branch  0 taken 89%
branch  1 taken 11%
        -: 1205:                    {
      389: 1206:                        discardCard(handPos, i, state, 0);
        -: 1207:                    }
        -: 1208:
        -: 1209:                    //draw 4
      490: 1210:                    for (j = 0; j < 4; j++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1211:                    {
      196: 1212:                        drawCard(i, state);
      196: 1213:                    }
       49: 1214:                }
      101: 1215:            }
      202: 1216:        }
      101: 1217:    }
      202: 1218:    return 0;
        -: 1219:}
        -: 1220:
        -: 1221:/* Refractored implementation for the ambassador card */
function ambassadorCard called 2 returned 100% blocks executed 70%
        -: 1222:int ambassadorCard(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1223:{
        -: 1224:    int j;
        -: 1225:    int i;
        2: 1226:    int currentPlayer = whoseTurn(state);
        -: 1227:
        2: 1228:    j = 1; //used to check if player has enough cards to discard (bug: change from 0 to 1)
        -: 1229:
        3: 1230:    if (choice2 > 2 || choice2 < 0)
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 100%
        -: 1231:    {
        1: 1232:        return -1;
        -: 1233:    }
        -: 1234:
        1: 1235:    if (choice1 == handPos)
branch  0 taken 0%
branch  1 taken 100%
        -: 1236:    {
    #####: 1237:        return -1;
        -: 1238:    }
        -: 1239:
       12: 1240:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1241:    {
       10: 1242:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 80%
branch  1 taken 20%
branch  2 taken 25%
branch  3 taken 75%
branch  4 taken 100%
branch  5 taken 0%
        -: 1243:        {
        1: 1244:            j++;
        1: 1245:        }
        5: 1246:    }
        -: 1247:
        1: 1248:    if (j < choice2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1249:    {
    #####: 1250:        return -1;
        -: 1251:    }
        -: 1252:
        -: 1253:    if (DEBUG)
        -: 1254:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1255:
        -: 1256:    //increase supply count for choosen card by amount being discarded
        1: 1257:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1258:
        -: 1259:    //each other player gains a copy of revealed card
        6: 1260:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -: 1261:    {
        2: 1262:        if (i == currentPlayer) //(bug: changed != to ==)
branch  0 taken 50%
branch  1 taken 50%
        -: 1263:        {
        1: 1264:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        1: 1265:        }
        2: 1266:    }
        -: 1267:
        -: 1268:    //discard played card from hand
        1: 1269:    discardCard(handPos, currentPlayer, state, 0);
        -: 1270:
        -: 1271:    //trash copies of cards returned to supply
        2: 1272:    for (j = 0; j < choice2; j++)
branch  0 taken 0%
branch  1 taken 100%
        -: 1273:    {
    #####: 1274:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1275:        {
    #####: 1276:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1277:            {
    #####: 1278:                discardCard(i, currentPlayer, state, 1);
    #####: 1279:                break;
        -: 1280:            }
    #####: 1281:        }
    #####: 1282:    }
        -: 1283:
        1: 1284:    return 0;
        2: 1285:}
        -: 1286:
        -: 1287:/* Refractored implementation for the tribute card */
function tributeCard called 403 returned 100% blocks executed 82%
        -: 1288:int tributeCard(struct gameState *state)
        -: 1289:{
      403: 1290:    int tributeRevealedCards[2] = {-1, -1};
      403: 1291:    int currentPlayer = whoseTurn(state);
      403: 1292:    int nextPlayer = currentPlayer + 1; //(bug: change from + 1 to -1)
        -: 1293:    int i;
        -: 1294:    
      403: 1295:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 taken 50%
branch  1 taken 50%
        -: 1296:    {
      200: 1297:        if (state->deckCount[nextPlayer] > 0)
branch  0 taken 50%
branch  1 taken 50%
        -: 1298:        {
      100: 1299:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
      100: 1300:            state->deckCount[nextPlayer]--;
      100: 1301:        }
      100: 1302:        else if (state->discardCount[nextPlayer] > 0)
branch  0 taken 0%
branch  1 taken 100%
        -: 1303:        {
    #####: 1304:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1305:            state->discardCount[nextPlayer]--;
    #####: 1306:        }
        -: 1307:        else
        -: 1308:        {
        -: 1309:            //No Card to Reveal
        -: 1310:            if (DEBUG)
        -: 1311:            {
        -: 1312:                printf("No cards to reveal\n");
        -: 1313:            }
        -: 1314:        }
      200: 1315:    }
        -: 1316:
        -: 1317:    else
        -: 1318:    {
      203: 1319:        if (state->deckCount[nextPlayer] == 0)
branch  0 taken 0%
branch  1 taken 100%
        -: 1320:        {
    #####: 1321:            for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1322:            {
    #####: 1323:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1324:                state->deckCount[nextPlayer]++;
    #####: 1325:                state->discard[nextPlayer][i] = -1;
    #####: 1326:                state->discardCount[nextPlayer]--;
    #####: 1327:            }
        -: 1328:
    #####: 1329:            shuffle(nextPlayer, state); //Shuffle the deck
    #####: 1330:        }
      203: 1331:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
      203: 1332:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      203: 1333:        state->deckCount[nextPlayer]--;
      203: 1334:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
      203: 1335:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      203: 1336:        state->deckCount[nextPlayer]--;
        -: 1337:    }
        -: 1338:
      403: 1339:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 taken 25%
branch  1 taken 75%
        -: 1340:    { //If we have a duplicate card, just drop one
      100: 1341:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      100: 1342:        state->playedCardCount++;
      100: 1343:        tributeRevealedCards[1] = -1;
      100: 1344:    }
        -: 1345:
     3224: 1346:    for (i = 0; i <= 2; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1347:    {
     3427: 1348:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 taken 92%
branch  1 taken 8%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        -: 1349:        { //Treasure cards
      100: 1350:            state->coins += 2;
      100: 1351:        }
        -: 1352:
     4733: 1353:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 taken 82%
branch  1 taken 18%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 100%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 100%
        -: 1354:        { //Victory Card Found
      203: 1355:            drawCard(currentPlayer, state);
      203: 1356:            drawCard(currentPlayer, state);
      203: 1357:        }
        -: 1358:        else
        -: 1359:        { //Action Card
      906: 1360:            state->numActions = state->numActions + 3; //(bug: change +2 to +3)
        -: 1361:        }
     1209: 1362:    }
        -: 1363:
      403: 1364:    return 0;
        -: 1365:}
        -: 1366:
        -: 1367:/* Refractored implementation for the mine card */
function mineCard called 2 returned 100% blocks executed 82%
        -: 1368:int mineCard(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1369:{
        -: 1370:    int j;
        -: 1371:    int i;
        2: 1372:    int currentPlayer = whoseTurn(state);
        -: 1373:
        2: 1374:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1375:
        4: 1376:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -: 1377:    {
    #####: 1378:        return 0; //(bug: changed return 0 to return -1)
        -: 1379:    }
        -: 1380:
        4: 1381:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -: 1382:    {
    #####: 1383:        return -1;
        -: 1384:    }
        -: 1385:
        2: 1386:    if ((getCost(state->hand[currentPlayer][choice1]) + 6) > getCost(choice2)) //(bug: changed + 3 to + 6)
branch  0 taken 50%
branch  1 taken 50%
        -: 1387:    {
        1: 1388:        return -1;
        -: 1389:    }
        -: 1390:
        1: 1391:    gainCard(choice2, state, 2, currentPlayer);
        -: 1392:
        -: 1393:
        -: 1394:    //discard card from hand
        1: 1395:    discardCard(handPos, currentPlayer, state, 0);
        -: 1396:
        -: 1397:
        -: 1398:    //discard trashed card
       22: 1399:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 91%
branch  1 taken 9%
        -: 1400:    {
       10: 1401:        if (state->hand[currentPlayer][i] == j)
branch  0 taken 0%
branch  1 taken 100%
        -: 1402:        {
    #####: 1403:            discardCard(i, currentPlayer, state, 0);
    #####: 1404:            break;
        -: 1405:        }
       10: 1406:    }
        -: 1407:
        1: 1408:    return 0;
        2: 1409:}
        -: 1410:
function discardCard called 896 returned 100% blocks executed 90%
        -: 1411:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1412:{
        -: 1413:
        -: 1414:    //if card is not trashed, added to Played pile
      896: 1415:    if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1416:    {
        -: 1417:        //add card to played pile
      896: 1418:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      896: 1419:        state->playedCardCount++;
      896: 1420:    }
        -: 1421:
        -: 1422:    //set played card to -1
      896: 1423:    state->hand[currentPlayer][handPos] = -1;
        -: 1424:
        -: 1425:    //remove card from player's hand
      896: 1426:    if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 5%
branch  1 taken 95%
        -: 1427:    {
        -: 1428:        //reduce number of cards in hand
       49: 1429:        state->handCount[currentPlayer]--;
       49: 1430:    }
      847: 1431:    else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1432:    {
        -: 1433:        //reduce number of cards in hand
    #####: 1434:        state->handCount[currentPlayer]--;
    #####: 1435:    }
        -: 1436:    else
        -: 1437:    {
        -: 1438:        //replace discarded card with last card in hand
      847: 1439:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1440:        //set last card to -1
      847: 1441:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1442:        //reduce number of cards in hand
      847: 1443:        state->handCount[currentPlayer]--;
        -: 1444:    }
        -: 1445:
      896: 1446:    return 0;
        -: 1447:}
        -: 1448:
function gainCard called 301 returned 100% blocks executed 81%
        -: 1449:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1450:{
        -: 1451:    //Note: supplyPos is enum of choosen card
        -: 1452:
        -: 1453:    //check if supply pile is empty (0) or card is not used in game (-1)
      301: 1454:    if (supplyCount(supplyPos, state) < 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1455:    {
    #####: 1456:        return -1;
        -: 1457:    }
        -: 1458:
        -: 1459:    //added card for [whoseTurn] current player:
        -: 1460:    // toFlag = 0 : add to discard
        -: 1461:    // toFlag = 1 : add to deck
        -: 1462:    // toFlag = 2 : add to hand
        -: 1463:
      301: 1464:    if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1465:    {
    #####: 1466:        state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1467:        state->deckCount[player]++;
    #####: 1468:    }
      301: 1469:    else if (toFlag == 2)
branch  0 taken 1%
branch  1 taken 99%
        -: 1470:    {
        1: 1471:        state->hand[player][state->handCount[player]] = supplyPos;
        1: 1472:        state->handCount[player]++;
        1: 1473:    }
        -: 1474:    else
        -: 1475:    {
      300: 1476:        state->discard[player][state->discardCount[player]] = supplyPos;
      300: 1477:        state->discardCount[player]++;
        -: 1478:    }
        -: 1479:
        -: 1480:    //decrease number in supply pile
      301: 1481:    state->supplyCount[supplyPos]--;
        -: 1482:
      301: 1483:    return 0;
      301: 1484:}
        -: 1485:
function updateCoins called 107 returned 100% blocks executed 85%
        -: 1486:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1487:{
        -: 1488:    int i;
        -: 1489:
        -: 1490:    //reset coin count
      107: 1491:    state->coins = 0;
        -: 1492:
        -: 1493:    //add coins for each Treasure card in player's hand
     1284: 1494:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1495:    {
      535: 1496:        if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1497:        {
      428: 1498:            state->coins += 1;
      428: 1499:        }
      107: 1500:        else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1501:        {
    #####: 1502:            state->coins += 2;
    #####: 1503:        }
      107: 1504:        else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1505:        {
    #####: 1506:            state->coins += 3;
    #####: 1507:        }
      535: 1508:    }
        -: 1509:
        -: 1510:    //add bonus
      107: 1511:    state->coins += bonus;
        -: 1512:
      107: 1513:    return 0;
        -: 1514:}
        -: 1515:
        -: 1516://end of dominion.c
