        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1://assignment 2
        -:    2:
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <stdlib.h>
        -:   10:
function compare called 56 returned 100% blocks executed 85%
        -:   11:int compare(const void *a, const void *b)
        -:   12:{
       56:   13:    if (*(int *)a > *(int *)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   14:        return 1;
       56:   15:    if (*(int *)a < *(int *)b)
branch  0 taken 36%
branch  1 taken 64%
       20:   16:        return -1;
       36:   17:    return 0;
       56:   18:}
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
        -:   20:struct gameState *newGame()
        -:   21:{
    #####:   22:    struct gameState *g = malloc(sizeof(struct gameState));
    #####:   23:    return g;
        -:   24:}
        -:   25:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   26:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:                  int k8, int k9, int k10)
        -:   28:{
    #####:   29:    int *k = malloc(10 * sizeof(int));
    #####:   30:    k[0] = k1;
    #####:   31:    k[1] = k2;
    #####:   32:    k[2] = k3;
    #####:   33:    k[3] = k4;
    #####:   34:    k[4] = k5;
    #####:   35:    k[5] = k6;
    #####:   36:    k[6] = k7;
    #####:   37:    k[7] = k8;
    #####:   38:    k[8] = k9;
    #####:   39:    k[9] = k10;
    #####:   40:    return k;
        -:   41:}
        -:   42:
function initializeGame called 2 returned 100% blocks executed 87%
        -:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:                   struct gameState *state)
        -:   45:{
        -:   46:    int i;
        -:   47:    int j;
        -:   48:    int it;
        -:   49:
        -:   50:    //set up random number generator
        2:   51:    SelectStream(1);
        2:   52:    PutSeed((long)randomSeed);
        -:   53:
        -:   54:    //check number of players
        4:   55:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   56:    {
    #####:   57:        return -1;
        -:   58:    }
        -:   59:
        -:   60:    //set number of players
        2:   61:    state->numPlayers = numPlayers;
        -:   62:
        -:   63:    //check selected kingdom cards are different
       44:   64:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   65:    {
      440:   66:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   67:        {
      380:   68:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   69:            {
    #####:   70:                return -1;
        -:   71:            }
      200:   72:        }
       20:   73:    }
        -:   74:
        -:   75:    //initialize supply
        -:   76:    ///////////////////////////////
        -:   77:
        -:   78:    //set number of Curse cards
        2:   79:    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   80:    {
        2:   81:        state->supplyCount[curse] = 10;
        2:   82:    }
    #####:   83:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   84:    {
    #####:   85:        state->supplyCount[curse] = 20;
    #####:   86:    }
        -:   87:    else
        -:   88:    {
    #####:   89:        state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:    //set number of Victory cards
        2:   93:    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   94:    {
        2:   95:        state->supplyCount[estate] = 8;
        2:   96:        state->supplyCount[duchy] = 8;
        2:   97:        state->supplyCount[province] = 8;
        2:   98:    }
        -:   99:    else
        -:  100:    {
    #####:  101:        state->supplyCount[estate] = 12;
    #####:  102:        state->supplyCount[duchy] = 12;
    #####:  103:        state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:    //set number of Treasure cards
        2:  107:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  108:    state->supplyCount[silver] = 40;
        2:  109:    state->supplyCount[gold] = 30;
        -:  110:
        -:  111:    //set number of Kingdom cards
       84:  112:    for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  113:    {
      680:  114:        for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  115:        {
      319:  116:            if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  117:            {
        -:  118:                //check if card is a 'Victory' Kingdom card
       38:  119:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 11%
branch  3 taken 89%
        -:  120:                {
        2:  121:                    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:  122:                    {
        2:  123:                        state->supplyCount[i] = 8;
        2:  124:                    }
        -:  125:                    else
        -:  126:                    {
    #####:  127:                        state->supplyCount[i] = 12;
        -:  128:                    }
        2:  129:                }
        -:  130:                else
        -:  131:                {
       17:  132:                    state->supplyCount[i] = 10;
        -:  133:                }
       19:  134:                break;
        -:  135:            }
        -:  136:            else //card is not in the set choosen for the game
        -:  137:            {
      300:  138:                state->supplyCount[i] = -1;
        -:  139:            }
      300:  140:        }
       40:  141:    }
        -:  142:
        -:  143:    ////////////////////////
        -:  144:    //supply intilization complete
        -:  145:
        -:  146:    //set player decks
       12:  147:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  148:    {
        4:  149:        state->deckCount[i] = 0;
       32:  150:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  151:        {
       12:  152:            state->deck[i][j] = estate;
       12:  153:            state->deckCount[i]++;
       12:  154:        }
       64:  155:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  156:        {
       28:  157:            state->deck[i][j] = copper;
       28:  158:            state->deckCount[i]++;
       28:  159:        }
        4:  160:    }
        -:  161:
        -:  162:    //shuffle player decks
       12:  163:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {
        4:  165:        if (shuffle(i, state) < 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  166:        {
    #####:  167:            return -1;
        -:  168:        }
        4:  169:    }
        -:  170:
        -:  171:    //draw player hands
       12:  172:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  173:    {
        -:  174:        //initialize hand size to zero
        4:  175:        state->handCount[i] = 0;
        4:  176:        state->discardCount[i] = 0;
        -:  177:        //draw 5 cards
        -:  178:        // for (j = 0; j < 5; j++)
        -:  179:        //	{
        -:  180:        //	  drawCard(i, state);
        -:  181:        //	}
        4:  182:    }
        -:  183:
        -:  184:    //set embargo tokens to 0 for all supply piles
      112:  185:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  186:    {
       54:  187:        state->embargoTokens[i] = 0;
       54:  188:    }
        -:  189:
        -:  190:    //initialize first player's turn
        2:  191:    state->outpostPlayed = 0;
        2:  192:    state->phase = 0;
        2:  193:    state->numActions = 1;
        2:  194:    state->numBuys = 1;
        2:  195:    state->playedCardCount = 0;
        2:  196:    state->whoseTurn = 0;
        2:  197:    state->handCount[state->whoseTurn] = 0;
        2:  198:    state->thrashPileCount = 0;
        -:  199:    //int it; move to top
        -:  200:
        -:  201:    //Moved draw cards to here, only drawing at the start of a turn
       24:  202:    for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17%
        -:  203:    {
       10:  204:        drawCard(state->whoseTurn, state);
       10:  205:    }
        -:  206:
        2:  207:    updateCoins(state->whoseTurn, state, 0);
        -:  208:
        2:  209:    return 0;
        2:  210:}
        -:  211:
function shuffle called 4 returned 100% blocks executed 93%
        -:  212:int shuffle(int player, struct gameState *state)
        -:  213:{
        -:  214:
        -:  215:    int newDeck[MAX_DECK];
        4:  216:    int newDeckPos = 0;
        -:  217:    int card;
        -:  218:    int i;
        -:  219:
        4:  220:    if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  221:        return -1;
        4:  222:    qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  223:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  224:
       88:  225:    while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9%
        -:  226:    {
       40:  227:        card = floor(Random() * state->deckCount[player]);
       40:  228:        newDeck[newDeckPos] = state->deck[player][card];
       40:  229:        newDeckPos++;
      264:  230:        for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 70%
branch  1 taken 30%
        -:  231:        {
       92:  232:            state->deck[player][i] = state->deck[player][i + 1];
       92:  233:        }
       40:  234:        state->deckCount[player]--;
        -:  235:    }
       88:  236:    for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  237:    {
       40:  238:        state->deck[player][i] = newDeck[i];
       40:  239:        state->deckCount[player]++;
       40:  240:    }
        -:  241:
        4:  242:    return 0;
        4:  243:}
        -:  244:
function playCard called 0 returned 0% blocks executed 0%
        -:  245:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  246:{
        -:  247:    int card;
    #####:  248:    int coin_bonus = 0; //tracks coins gain from actions
        -:  249:
        -:  250:    //check if it is the right phase
    #####:  251:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  252:    {
    #####:  253:        return -1;
        -:  254:    }
        -:  255:
        -:  256:    //check if player has enough actions
    #####:  257:    if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  258:    {
    #####:  259:        return -1;
        -:  260:    }
        -:  261:
        -:  262:    //get card played
    #####:  263:    card = handCard(handPos, state);
        -:  264:
        -:  265:    //check if selected card is an action
    #####:  266:    if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  267:    {
    #####:  268:        return -1;
        -:  269:    }
        -:  270:
        -:  271:    //play card
    #####:  272:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
branch  0 never executed
branch  1 never executed
        -:  273:    {
    #####:  274:        return -1;
        -:  275:    }
        -:  276:
        -:  277:    //reduce number of actions
    #####:  278:    state->numActions--;
        -:  279:
        -:  280:    //update coins (Treasure cards may be added with card draws)
    #####:  281:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  282:
    #####:  283:    return 0;
    #####:  284:}
        -:  285:
function buyCard called 0 returned 0% blocks executed 0%
        -:  286:int buyCard(int supplyPos, struct gameState *state)
        -:  287:{
        -:  288:    int who;
        -:  289:    if (DEBUG)
        -:  290:    {
        -:  291:        printf("Entering buyCard...\n");
        -:  292:    }
        -:  293:
        -:  294:    // I don't know what to do about the phase thing.
        -:  295:
    #####:  296:    who = state->whoseTurn;
        -:  297:
    #####:  298:    if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  299:    {
        -:  300:        if (DEBUG)
        -:  301:            printf("You do not have any buys left\n");
    #####:  302:        return -1;
        -:  303:    }
    #####:  304:    else if (supplyCount(supplyPos, state) < 1)
branch  0 never executed
branch  1 never executed
        -:  305:    {
        -:  306:        if (DEBUG)
        -:  307:            printf("There are not any of that type of card left\n");
    #####:  308:        return -1;
        -:  309:    }
    #####:  310:    else if (state->coins < getCost(supplyPos))
branch  0 never executed
branch  1 never executed
        -:  311:    {
        -:  312:        if (DEBUG)
        -:  313:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  314:        return -1;
        -:  315:    }
        -:  316:    else
        -:  317:    {
    #####:  318:        state->phase = 1;
        -:  319:        //state->supplyCount[supplyPos]--;
    #####:  320:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  321:
    #####:  322:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  323:        state->numBuys--;
        -:  324:        if (DEBUG)
        -:  325:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  326:    }
        -:  327:
        -:  328:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  329:    //state->discardCount[who]++;
        -:  330:
    #####:  331:    return 0;
    #####:  332:}
        -:  333:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  334:int numHandCards(struct gameState *state)
        -:  335:{
    #####:  336:    return state->handCount[whoseTurn(state)];
        -:  337:}
        -:  338:
function handCard called 0 returned 0% blocks executed 0%
        -:  339:int handCard(int handPos, struct gameState *state)
        -:  340:{
    #####:  341:    int currentPlayer = whoseTurn(state);
    #####:  342:    return state->hand[currentPlayer][handPos];
        -:  343:}
        -:  344:
function supplyCount called 3 returned 100% blocks executed 100%
        -:  345:int supplyCount(int card, struct gameState *state)
        -:  346:{
        3:  347:    return state->supplyCount[card];
        -:  348:}
        -:  349:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  350:int fullDeckCount(int player, int card, struct gameState *state)
        -:  351:{
        -:  352:    int i;
    #####:  353:    int count = 0;
        -:  354:
    #####:  355:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  356:    {
    #####:  357:        if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  358:            count++;
    #####:  359:    }
        -:  360:
    #####:  361:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  362:    {
    #####:  363:        if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  364:            count++;
    #####:  365:    }
        -:  366:
    #####:  367:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  368:    {
    #####:  369:        if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  370:            count++;
    #####:  371:    }
        -:  372:
    #####:  373:    return count;
        -:  374:}
        -:  375:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  376:int whoseTurn(struct gameState *state)
        -:  377:{
    #####:  378:    return state->whoseTurn;
        -:  379:}
        -:  380:
function endTurn called 0 returned 0% blocks executed 0%
        -:  381:int endTurn(struct gameState *state)
        -:  382:{
        -:  383:    int k;
        -:  384:    int i;
    #####:  385:    int currentPlayer = whoseTurn(state);
        -:  386:
        -:  387:    //Discard hand
    #####:  388:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  389:    {
    #####:  390:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  391:        state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
    #####:  392:    }
    #####:  393:    state->handCount[currentPlayer] = 0; //Reset hand count
        -:  394:
        -:  395:    //Code for determining the player
    #####:  396:    if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  397:    {
    #####:  398:        state->whoseTurn = currentPlayer + 1; //Still safe to increment
    #####:  399:    }
        -:  400:    else
        -:  401:    {
    #####:  402:        state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  403:    }
        -:  404:
    #####:  405:    state->outpostPlayed = 0;
    #####:  406:    state->phase = 0;
    #####:  407:    state->numActions = 1;
    #####:  408:    state->coins = 0;
    #####:  409:    state->numBuys = 1;
    #####:  410:    state->playedCardCount = 0;
    #####:  411:    state->handCount[state->whoseTurn] = 0;
        -:  412:
        -:  413:    //int k; move to top
        -:  414:    //Next player draws hand
    #####:  415:    for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  416:    {
    #####:  417:        drawCard(state->whoseTurn, state); //Draw a card
    #####:  418:    }
        -:  419:
        -:  420:    //Update money
    #####:  421:    updateCoins(state->whoseTurn, state, 0);
        -:  422:
    #####:  423:    return 0;
        -:  424:}
        -:  425:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  426:int isGameOver(struct gameState *state)
        -:  427:{
        -:  428:    int i;
        -:  429:    int j;
        -:  430:
        -:  431:    //if stack of Province cards is empty, the game ends
    #####:  432:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  433:    {
    #####:  434:        return 1;
        -:  435:    }
        -:  436:
        -:  437:    //if three supply pile are at 0, the game ends
    #####:  438:    j = 0;
    #####:  439:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  440:    {
    #####:  441:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  442:        {
    #####:  443:            j++;
    #####:  444:        }
    #####:  445:    }
    #####:  446:    if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:        return 1;
        -:  449:    }
        -:  450:
    #####:  451:    return 0;
    #####:  452:}
        -:  453:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  454:int scoreFor(int player, struct gameState *state)
        -:  455:{
        -:  456:
        -:  457:    int i;
    #####:  458:    int score = 0;
        -:  459:    //score from hand
    #####:  460:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  461:    {
    #####:  462:        if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  463:        {
    #####:  464:            score = score - 1;
    #####:  465:        };
    #####:  466:        if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  467:        {
    #####:  468:            score = score + 1;
    #####:  469:        };
    #####:  470:        if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  471:        {
    #####:  472:            score = score + 3;
    #####:  473:        };
    #####:  474:        if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  475:        {
    #####:  476:            score = score + 6;
    #####:  477:        };
    #####:  478:        if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  479:        {
    #####:  480:            score = score + 1;
    #####:  481:        };
    #####:  482:        if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  483:        {
    #####:  484:            score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  485:        };
    #####:  486:    }
        -:  487:
        -:  488:    //score from discard
    #####:  489:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:        if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  492:        {
    #####:  493:            score = score - 1;
    #####:  494:        };
    #####:  495:        if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  496:        {
    #####:  497:            score = score + 1;
    #####:  498:        };
    #####:  499:        if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  500:        {
    #####:  501:            score = score + 3;
    #####:  502:        };
    #####:  503:        if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  504:        {
    #####:  505:            score = score + 6;
    #####:  506:        };
    #####:  507:        if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  508:        {
    #####:  509:            score = score + 1;
    #####:  510:        };
    #####:  511:        if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  512:        {
    #####:  513:            score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  514:        };
    #####:  515:    }
        -:  516:
        -:  517:    //score from deck
    #####:  518:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  519:    {
    #####:  520:        if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  521:        {
    #####:  522:            score = score - 1;
    #####:  523:        };
    #####:  524:        if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  525:        {
    #####:  526:            score = score + 1;
    #####:  527:        };
    #####:  528:        if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  529:        {
    #####:  530:            score = score + 3;
    #####:  531:        };
    #####:  532:        if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  533:        {
    #####:  534:            score = score + 6;
    #####:  535:        };
    #####:  536:        if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  537:        {
    #####:  538:            score = score + 1;
    #####:  539:        };
    #####:  540:        if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  543:        };
    #####:  544:    }
        -:  545:
    #####:  546:    return score;
        -:  547:}
        -:  548:
function getWinners called 0 returned 0% blocks executed 0%
        -:  549:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  550:{
        -:  551:    int i;
        -:  552:    int j;
        -:  553:    int highScore;
        -:  554:    int currentPlayer;
        -:  555:
        -:  556:    //get score for each player
    #####:  557:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  558:    {
        -:  559:        //set unused player scores to -9999
    #####:  560:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  561:        {
    #####:  562:            players[i] = -9999;
    #####:  563:        }
        -:  564:        else
        -:  565:        {
    #####:  566:            players[i] = scoreFor(i, state);
        -:  567:        }
    #####:  568:    }
        -:  569:
        -:  570:    //find highest score
    #####:  571:    j = 0;
    #####:  572:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  573:    {
    #####:  574:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  575:        {
    #####:  576:            j = i;
    #####:  577:        }
    #####:  578:    }
    #####:  579:    highScore = players[j];
        -:  580:
        -:  581:    //add 1 to players who had less turns
    #####:  582:    currentPlayer = whoseTurn(state);
    #####:  583:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  584:    {
    #####:  585:        if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  586:        {
    #####:  587:            players[i]++;
    #####:  588:        }
    #####:  589:    }
        -:  590:
        -:  591:    //find new highest score
    #####:  592:    j = 0;
    #####:  593:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  594:    {
    #####:  595:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  596:        {
    #####:  597:            j = i;
    #####:  598:        }
    #####:  599:    }
    #####:  600:    highScore = players[j];
        -:  601:
        -:  602:    //set winners in array to 1 and rest to 0
    #####:  603:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  604:    {
    #####:  605:        if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  606:        {
    #####:  607:            players[i] = 1;
    #####:  608:        }
        -:  609:        else
        -:  610:        {
    #####:  611:            players[i] = 0;
        -:  612:        }
    #####:  613:    }
        -:  614:
    #####:  615:    return 0;
        -:  616:}
        -:  617:
function drawCard called 10 returned 100% blocks executed 41%
        -:  618:int drawCard(int player, struct gameState *state)
        -:  619:{
        -:  620:    int count;
        -:  621:    int deckCounter;
       10:  622:    if (state->deckCount[player] <= 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  623:    { //Deck is empty
        -:  624:
        -:  625:        //Step 1 Shuffle the discard pile back into a deck
        -:  626:        int i;
        -:  627:        //Move discard to deck
    #####:  628:        for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  629:        {
    #####:  630:            state->deck[player][i] = state->discard[player][i];
    #####:  631:            state->discard[player][i] = -1;
    #####:  632:        }
        -:  633:
    #####:  634:        state->deckCount[player] = state->discardCount[player];
    #####:  635:        state->discardCount[player] = 0; //Reset discard
        -:  636:
        -:  637:        //Shufffle the deck
    #####:  638:        shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  639:
        -:  640:        if (DEBUG)
        -:  641:        { //Debug statements
        -:  642:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  643:        }
        -:  644:
    #####:  645:        state->discardCount[player] = 0;
        -:  646:
        -:  647:        //Step 2 Draw Card
    #####:  648:        count = state->handCount[player]; //Get current player's hand count
        -:  649:
        -:  650:        if (DEBUG)
        -:  651:        { //Debug statements
        -:  652:            printf("Current hand count: %d\n", count);
        -:  653:        }
        -:  654:
    #####:  655:        deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  656:
    #####:  657:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  658:            return -1;
        -:  659:
    #####:  660:        state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  661:        state->deckCount[player]--;
    #####:  662:        state->handCount[player]++; //Increment hand count
    #####:  663:    }
        -:  664:
        -:  665:    else
        -:  666:    {
       10:  667:        int count = state->handCount[player]; //Get current hand count for player
        -:  668:        int deckCounter;
        -:  669:        if (DEBUG)
        -:  670:        { //Debug statements
        -:  671:            printf("Current hand count: %d\n", count);
        -:  672:        }
        -:  673:
       10:  674:        deckCounter = state->deckCount[player];                            //Create holder for the deck count
       10:  675:        state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       10:  676:        state->deckCount[player]--;
       10:  677:        state->handCount[player]++; //Increment hand count
        -:  678:    }
        -:  679:
       10:  680:    return 0;
       10:  681:}
        -:  682:
function getCost called 0 returned 0% blocks executed 0%
        -:  683:int getCost(int cardNumber)
        -:  684:{
    #####:  685:    switch (cardNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  686:    {
        -:  687:    case curse:
    #####:  688:        return 0;
        -:  689:    case estate:
    #####:  690:        return 2;
        -:  691:    case duchy:
    #####:  692:        return 5;
        -:  693:    case province:
    #####:  694:        return 8;
        -:  695:    case copper:
    #####:  696:        return 0;
        -:  697:    case silver:
    #####:  698:        return 3;
        -:  699:    case gold:
    #####:  700:        return 6;
        -:  701:    case adventurer:
    #####:  702:        return 6;
        -:  703:    case council_room:
    #####:  704:        return 5;
        -:  705:    case feast:
    #####:  706:        return 4;
        -:  707:    case gardens:
    #####:  708:        return 4;
        -:  709:    case mine:
    #####:  710:        return 5;
        -:  711:    case remodel:
    #####:  712:        return 4;
        -:  713:    case smithy:
    #####:  714:        return 4;
        -:  715:    case village:
    #####:  716:        return 3;
        -:  717:    case baron:
    #####:  718:        return 4;
        -:  719:    case great_hall:
    #####:  720:        return 3;
        -:  721:    case minion:
    #####:  722:        return 5;
        -:  723:    case steward:
    #####:  724:        return 3;
        -:  725:    case tribute:
    #####:  726:        return 5;
        -:  727:    case ambassador:
    #####:  728:        return 3;
        -:  729:    case cutpurse:
    #####:  730:        return 4;
        -:  731:    case embargo:
    #####:  732:        return 2;
        -:  733:    case outpost:
    #####:  734:        return 5;
        -:  735:    case salvager:
    #####:  736:        return 4;
        -:  737:    case sea_hag:
    #####:  738:        return 4;
        -:  739:    case treasure_map:
    #####:  740:        return 4;
        -:  741:    }
        -:  742:
    #####:  743:    return -1;
    #####:  744:}
        -:  745:
function playBaron called 2 returned 100% blocks executed 75%
        -:  746:int playBaron(int handPos, int choice1, struct gameState *state, int currentPlayer, int bonus)
        -:  747:{
        2:  748:    state->numBuys++; //Increase buys by 1!
        2:  749:    printf("Baron action card played! One buy phase added. \n");
        -:  750:
        2:  751:    if (choice1 == 1)                                                //choose to discard estate card
branch  0 taken 100%
branch  1 taken 0%
        -:  752:    {                                                                //Boolean true or going to discard an estate
        2:  753:        int p = 0;                                                   //Iterator for hand!v
        2:  754:        int card_not_discarded = 1;                                  //Flag for discard set!
        8:  755:        while (card_not_discarded)
branch  0 taken 50%
branch  1 taken 50%
        -:  756:        {
        2:  757:            if (p < state->handCount[currentPlayer])                //if current deck has not been completely iterated
branch  0 taken 50%
branch  1 taken 50%
        -:  758:            {
        1:  759:                if (state->hand[currentPlayer][p] == estate)        // if estate card found in current hand
branch  0 taken 100%
branch  1 taken 0%
        -:  760:                {                                                   // Found an estate card!
        1:  761:                    printf("Found an estate card in current hand. Discard estate card and gained 4 coints for current purchase phase! \n");
        1:  762:                    bonus = 4;                                      //Add 4 bonus coins to the amount of coins as suggested by Adams Rosales
        -:  763:
        1:  764:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  765:                    state->discardCount[currentPlayer]++;
        6:  766:                    for (; p < state->handCount[currentPlayer]; p++)
branch  0 taken 67%
branch  1 taken 33%
        -:  767:                    {
        2:  768:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        2:  769:                    }
        1:  770:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  771:                    
        1:  772:                    card_not_discarded = 0;                         //Exit the loop
        1:  773:                }
        1:  774:            }
        -:  775:
        1:  776:            else if (p >= state->handCount[currentPlayer])          //current deck has been completely iterated
branch  0 taken 100%
branch  1 taken 0%
        -:  777:            {
        -:  778:                if (DEBUG)
        -:  779:                {
        -:  780:                    printf("No estate cards in your hand, invalid choice\n");
        -:  781:                    printf("Will gain an estate if there are any\n");
        -:  782:                }
        1:  783:                if (supplyCount(estate, state) > 0)                 //check if supply has estate to provide to player
branch  0 taken 100%
branch  1 taken 0%
        -:  784:                {
        1:  785:                    gainCard(estate, state, 0, currentPlayer);      //give current player an estate card
        1:  786:                    if (supplyCount(estate, state) == 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  787:                    {
    #####:  788:                        isGameOver(state);
    #####:  789:                    }
        1:  790:                }
        1:  791:                card_not_discarded = 0;                             //Exit the loop
        1:  792:            }
        -:  793:
        -:  794:            else
        -:  795:            {
    #####:  796:                p++; //Next card
        -:  797:            }
        -:  798:        }
        2:  799:    }
        -:  800:
        -:  801:    else
        -:  802:    {
    #####:  803:        if (supplyCount(estate, state) > 0)
branch  0 never executed
branch  1 never executed
        -:  804:        {
    #####:  805:            gainCard(estate, state, 0, currentPlayer);          //Gain an estate
        -:  806:
    #####:  807:            if (supplyCount(estate, state) == 0)                //no more estate card
branch  0 never executed
branch  1 never executed
        -:  808:            {
    #####:  809:                isGameOver(state);
    #####:  810:            }
    #####:  811:        }
        -:  812:    }
        -:  813:
        -:  814:    // discard card
        2:  815:    discardCard(handPos, currentPlayer, state, 0);
        -:  816:
        2:  817:    return 0;
        -:  818:}
        -:  819:
function playMinion called 0 returned 0% blocks executed 0%
        -:  820:int playMinion(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos, int bonus)
        -:  821:{
        -:  822:    int i;
        -:  823:    int j;
        -:  824:
        -:  825:
        -:  826:    //discard card from hand
    #####:  827:    discardCard(handPos, currentPlayer, state, 0);
        -:  828:
    #####:  829:    if (choice1)
branch  0 never executed
branch  1 never executed
        -:  830:    {
    #####:  831:        bonus = 2; //Add 2 bonus coins to the amount of coins for current buy phase
    #####:  832:    }
    #####:  833:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  834:    {
        -:  835:        //discard hand while hand still has cards (fix referenced from Tim Palecek on Piazza)
    #####:  836:        while (numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  837:        {
    #####:  838:            discardCard(0, currentPlayer, state, 0);
        -:  839:        }
        -:  840:
        -:  841:        //draw 4
    #####:  842:        for (i = 0; i < 5; i++)
branch  0 never executed
branch  1 never executed
        -:  843:        {
    #####:  844:            drawCard(currentPlayer, state);
    #####:  845:        }
        -:  846:
        -:  847:        //other players discard hand and redraw if hand size > 4
    #####:  848:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  849:        {
    #####:  850:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  851:            {
    #####:  852:                if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -:  853:                {
        -:  854:                    //discard hand while hand still has cards (fix referenced from Tim Palecek on Piazza)
    #####:  855:                    while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -:  856:                    {
    #####:  857:                        discardCard(0, i, state, 0);
        -:  858:                    }
        -:  859:
        -:  860:                    //draw 4
    #####:  861:                    for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  862:                    {
    #####:  863:                        drawCard(i, state);
    #####:  864:                    }
    #####:  865:                }
    #####:  866:            }
    #####:  867:        }
    #####:  868:    }
        -:  869:
        -:  870:    else //referenced from Piazza suggestion from Tim Palecek
        -:  871:    {
    #####:  872:        printf("Invalid choice made. Please input choice 1 to gain 2 coins or choice 2 to discard hand and redraw.\n");
        -:  873:    }
        -:  874:
    #####:  875:    return 0;
        -:  876:}
        -:  877:
function playAmbassador called 0 returned 0% blocks executed 0%
        -:  878:int playAmbassador(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos)
        -:  879:{
        -:  880:    int i;
        -:  881:    int j;
        -:  882:
    #####:  883:    j = 0; //used to check if player has enough cards to discard
        -:  884:
    #####:  885:    if (choice2 > 3 || choice2 < 0) // make sure number of cards input is valid
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  886:    {
    #####:  887:        return -1;
        -:  888:    }
        -:  889:
    #####:  890:    if (choice1 == handPos) //cannot reveal ambassador card
branch  0 never executed
branch  1 never executed
        -:  891:    {
    #####:  892:        return -1;
        -:  893:    }
        -:  894:
    #####:  895:    for (i = 0; i < state->handCount[currentPlayer]; i++) //check for duplicates of card chosen to be revealed
branch  0 never executed
branch  1 never executed
        -:  896:    {
    #####:  897:        if (i != handPos && state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1] && i != choice1) //fix suggested by Akifumi Komori on Piazza
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  898:        {
    #####:  899:            j++;
    #####:  900:        }
    #####:  901:    }
        -:  902:
    #####:  903:    if (j < choice2 && j > 0) //make sure j is still valid despite less than choice2 inputted
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:    {
    #####:  905:        choice2 = j;
    #####:  906:    }
        -:  907:
        -:  908:    if (DEBUG)
        -:  909:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  910:
        -:  911:    //increase supply count for choosen card by amount being discarded
    #####:  912:    state->supplyCount[state->hand[currentPlayer][choice1]] = choice2;
        -:  913:
        -:  914:    //each other player gains a copy of revealed card
    #####:  915:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  916:    {
    #####:  917:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  918:        {
    #####:  919:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  920:        }
    #####:  921:    }
        -:  922:
        -:  923:    //discard played card from hand
    #####:  924:    discardCard(handPos, currentPlayer, state, 0);
        -:  925:
        -:  926:    //trash copies of cards returned to supply
    #####:  927:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  928:    {
    #####:  929:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  930:        {
    #####:  931:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  932:            {
    #####:  933:                discardCard(i, currentPlayer, state, 1);
    #####:  934:                break;
        -:  935:            }
    #####:  936:        }
    #####:  937:    }
        -:  938:
    #####:  939:    return 0;
    #####:  940:}
        -:  941:
function playTribute called 0 returned 0% blocks executed 0%
        -:  942:int playTribute(struct gameState *state, int currentPlayer, int handPos, int tributeRevealedCards[2], int nextPlayer, int bonus)
        -:  943:{
        -:  944:    int i;
        -:  945:
    #####:  946:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -:  947:    {
        -:  948:
    #####:  949:        if (state->deckCount[nextPlayer] > 0) // partially referenced from Brian Terrel from Piazza
branch  0 never executed
branch  1 never executed
        -:  950:        {
    #####:  951:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  952:            state->discard[nextPlayer][state->discardCount[nextPlayer]] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  953:            state->discardCount[nextPlayer]++;
    #####:  954:            int topDeck = state->deckCount[nextPlayer] - 1;
    #####:  955:            discardCard(topDeck, nextPlayer, state, 0);
    #####:  956:            state->deckCount[nextPlayer]--;
    #####:  957:        }
        -:  958:
    #####:  959:        else if (state->discardCount[nextPlayer] > 0) //only one card in the discard pile
branch  0 never executed
branch  1 never executed
        -:  960:        {
    #####:  961:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
        -:  962:
        -:  963:            //removed decrement as discussed by Brian on Piazza
    #####:  964:        }
        -:  965:        else
        -:  966:        {
        -:  967:            //No Card to Reveal
        -:  968:            if (DEBUG)
        -:  969:            {
        -:  970:                printf("No cards to reveal\n");
        -:  971:            }
        -:  972:        }
    #####:  973:    }
        -:  974:
        -:  975:    else
        -:  976:    {
    #####:  977:        if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -:  978:        {
    #####:  979:            for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  980:            {
    #####:  981:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####:  982:                state->deckCount[nextPlayer]++;
    #####:  983:                state->discard[nextPlayer][i] = -1;
    #####:  984:                state->discardCount[nextPlayer]--;
    #####:  985:            }
        -:  986:
    #####:  987:            shuffle(nextPlayer, state); //Shuffle the deck
    #####:  988:        }
        -:  989:
        -:  990:        // as suggested by Brian Terrel on Piazza to ensure card is discarded properly once revealed and added follow-up changes
        -:  991:        // suggested by Chung Weng
        -:  992:
    #####:  993:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  994:        state->discard[nextPlayer][state->discardCount[nextPlayer]] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  995:        state->discardCount[nextPlayer]++;
    #####:  996:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  997:        state->deckCount[nextPlayer]--;
        -:  998:
    #####:  999:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1000:        state->discard[nextPlayer][state->discardCount[nextPlayer]] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1001:        state->discardCount[nextPlayer]++;
    #####: 1002:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1003:        state->deckCount[nextPlayer]--;
        -: 1004:    }
        -: 1005:
    #####: 1006:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1007:    { //If we have a duplicate card, just drop one
    #####: 1008:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1009:        state->playedCardCount++;
    #####: 1010:        tributeRevealedCards[1] = -1;
    #####: 1011:    }
        -: 1012:
    #####: 1013:    for (i = 0; i < 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1014:    {
    #####: 1015:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1016:        { //Treasure cards
    #####: 1017:            bonus = 3;
    #####: 1018:        }
        -: 1019:
    #####: 1020:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1021:        { //Victory Card Found
    #####: 1022:            drawCard(currentPlayer, state);
    #####: 1023:            drawCard(currentPlayer, state);
    #####: 1024:        }
        -: 1025:        else
        -: 1026:        { //Action Card
    #####: 1027:            state->numActions = 2;
        -: 1028:        }
    #####: 1029:    }
        -: 1030:
    #####: 1031:    discardCard(handPos, currentPlayer, state, 0); // to make sure card is discarded after use as suggested by Robert Saraceno on Piazza
        -: 1032:
    #####: 1033:    return 0;
        -: 1034:}
        -: 1035:
function playMine called 0 returned 0% blocks executed 0%
        -: 1036:int playMine(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos)
        -: 1037:{
        -: 1038:    int i;
        -: 1039:    int j;
        -: 1040:
    #####: 1041:    j = state->hand[currentPlayer][choice2]; //store card we will trash
        -: 1042:
    #####: 1043:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1044:    {
    #####: 1045:        return -1;
        -: 1046:    }
        -: 1047:
    #####: 1048:    if (choice2 > gold || choice2 < copper) //change suggested by Matthew Dienhart to ensure only treasure cards are valid
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1049:    {
    #####: 1050:        return -1;
        -: 1051:    }
        -: 1052:
    #####: 1053:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) //make sure swap choice is valid and not more than +3 of card discarded
branch  0 never executed
branch  1 never executed
        -: 1054:    {
    #####: 1055:        return -1;
        -: 1056:    }
        -: 1057:
    #####: 1058:    gainCard(choice1, state, 2, currentPlayer);
        -: 1059:
        -: 1060:    //discard card from hand
    #####: 1061:    discardCard(handPos, currentPlayer, state, 0);
        -: 1062:
        -: 1063:    //discard trashed card
    #####: 1064:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1065:    {
    #####: 1066:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1067:        {
    #####: 1068:            discardCard(i, currentPlayer, state, 1); //thrash only one card that fits choice1
    #####: 1069:            break;
        -: 1070:        }
    #####: 1071:    }
        -: 1072:
    #####: 1073:    return 0;
    #####: 1074:}
        -: 1075:
function cardEffect called 0 returned 0% blocks executed 0%
        -: 1076:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1077:{
        -: 1078:    int i;
        -: 1079:    int j;
        -: 1080:    int k;
        -: 1081:    int x;
        -: 1082:    int index;
    #####: 1083:    int currentPlayer = whoseTurn(state);
    #####: 1084:    int nextPlayer = currentPlayer + 1;
        -: 1085:
    #####: 1086:    int tributeRevealedCards[2] = {-1, -1};
        -: 1087:    int temphand[MAX_HAND]; // moved above the if statement
    #####: 1088:    int drawntreasure = 0;
        -: 1089:    int cardDrawn;
    #####: 1090:    int z = 0; // this is the counter for the temp hand
    #####: 1091:    if (nextPlayer > (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -: 1092:    {
    #####: 1093:        nextPlayer = 0;
    #####: 1094:    }
        -: 1095:
        -: 1096:    //uses switch to select card and perform actions
    #####: 1097:    switch (card)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -: 1098:    {
        -: 1099:    case adventurer:
    #####: 1100:        while (drawntreasure < 2)
branch  0 never executed
branch  1 never executed
        -: 1101:        {
    #####: 1102:            if (state->deckCount[currentPlayer] < 1)
branch  0 never executed
branch  1 never executed
        -: 1103:            { //if the deck is empty we need to shuffle discard and add to deck
    #####: 1104:                shuffle(currentPlayer, state);
    #####: 1105:            }
    #####: 1106:            drawCard(currentPlayer, state);
    #####: 1107:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####: 1108:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1109:                drawntreasure++;
        -: 1110:            else
        -: 1111:            {
    #####: 1112:                temphand[z] = cardDrawn;
    #####: 1113:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1114:                z++;
        -: 1115:            }
        -: 1116:        }
    #####: 1117:        while (z - 1 >= 0)
branch  0 never executed
branch  1 never executed
        -: 1118:        {
    #####: 1119:            state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1120:            z = z - 1;
        -: 1121:        }
    #####: 1122:        return 0;
        -: 1123:
        -: 1124:    case council_room:
        -: 1125:        //+4 Cards
    #####: 1126:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:        {
    #####: 1128:            drawCard(currentPlayer, state);
    #####: 1129:        }
        -: 1130:
        -: 1131:        //+1 Buy
    #####: 1132:        state->numBuys++;
        -: 1133:
        -: 1134:        //Each other player draws a card
    #####: 1135:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1136:        {
    #####: 1137:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1138:            {
    #####: 1139:                drawCard(i, state);
    #####: 1140:            }
    #####: 1141:        }
        -: 1142:
        -: 1143:        //put played card in played card pile
    #####: 1144:        discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
    #####: 1146:        return 0;
        -: 1147:
        -: 1148:    case feast:
        -: 1149:        //gain card with cost up to 5
        -: 1150:        //Backup hand
    #####: 1151:        for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1152:        {
    #####: 1153:            temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####: 1154:            state->hand[currentPlayer][i] = -1;          //Set to nothing
    #####: 1155:        }
        -: 1156:        //Backup hand
        -: 1157:
        -: 1158:        //Update Coins for Buy
        -: 1159:        // updateCoins(currentPlayer, state, 5);
    #####: 1160:        x = 1; //Condition to loop on
    #####: 1161:        while (x == 1)
branch  0 never executed
branch  1 never executed
        -: 1162:        { //Buy one card
    #####: 1163:            if (supplyCount(choice1, state) <= 0)
branch  0 never executed
branch  1 never executed
        -: 1164:            {
        -: 1165:                if (DEBUG)
        -: 1166:                    printf("None of that card left, sorry!\n");
        -: 1167:
        -: 1168:                if (DEBUG)
        -: 1169:                {
        -: 1170:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1171:                }
    #####: 1172:            }
    #####: 1173:            else if ( getCost(choice1) > 5)
branch  0 never executed
branch  1 never executed
        -: 1174:            {
    #####: 1175:                printf("That card is too expensive!\n");
        -: 1176:
        -: 1177:                if (DEBUG)
        -: 1178:                {
        -: 1179:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1180:                }
    #####: 1181:            }
        -: 1182:            else
        -: 1183:            {
        -: 1184:
        -: 1185:                if (DEBUG)
        -: 1186:                {
        -: 1187:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1188:                }
        -: 1189:
    #####: 1190:                gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####: 1191:                x = 0;                                      //No more buying cards
        -: 1192:
        -: 1193:                if (DEBUG)
        -: 1194:                {
        -: 1195:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1196:                }
        -: 1197:            }
        -: 1198:        }
        -: 1199:
        -: 1200:        //Reset Hand
    #####: 1201:        for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1202:        {
    #####: 1203:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1204:            temphand[i] = -1;
    #####: 1205:        }
        -: 1206:        //Reset Hand
        -: 1207:
    #####: 1208:        return 0;
        -: 1209:
        -: 1210:    case gardens:
    #####: 1211:        return -1;
        -: 1212:
        -: 1213:    case mine:
    #####: 1214:        return playMine(choice1, choice2, state, currentPlayer, handPos);
        -: 1215:
        -: 1216:    case remodel:
    #####: 1217:        j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1218:
    #####: 1219:        if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
branch  0 never executed
branch  1 never executed
        -: 1220:        {
    #####: 1221:            return -1;
        -: 1222:        }
        -: 1223:
    #####: 1224:        gainCard(choice2, state, 0, currentPlayer);
        -: 1225:
        -: 1226:        //discard card from hand
    #####: 1227:        discardCard(handPos, currentPlayer, state, 0);
        -: 1228:
        -: 1229:        //discard trashed card
    #####: 1230:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:        {
    #####: 1232:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1233:            {
    #####: 1234:                discardCard(i, currentPlayer, state, 0);
    #####: 1235:                break;
        -: 1236:            }
    #####: 1237:        }
        -: 1238:
    #####: 1239:        return 0;
        -: 1240:
        -: 1241:    case smithy:
        -: 1242:        //+3 Cards
    #####: 1243:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1244:        {
    #####: 1245:            drawCard(currentPlayer, state);
    #####: 1246:        }
        -: 1247:
        -: 1248:        //discard card from hand
    #####: 1249:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1250:        return 0;
        -: 1251:
        -: 1252:    case village:
        -: 1253:        //+1 Card
    #####: 1254:        drawCard(currentPlayer, state);
        -: 1255:
        -: 1256:        //+2 Actions
    #####: 1257:        state->numActions = state->numActions + 2;
        -: 1258:
        -: 1259:        //discard played card from hand
    #####: 1260:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1261:        return 0;
        -: 1262:
        -: 1263:    case baron:
    #####: 1264:        return playBaron(handPos, choice1, state, currentPlayer, *bonus);
        -: 1265:
        -: 1266:    case great_hall:
        -: 1267:        //+1 Card
    #####: 1268:        drawCard(currentPlayer, state);
        -: 1269:
        -: 1270:        //+1 Actions
    #####: 1271:        state->numActions++;
        -: 1272:
        -: 1273:        //discard card from hand
    #####: 1274:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1275:        return 0;
        -: 1276:
        -: 1277:    case minion:
    #####: 1278:        return playMinion(choice1, choice2, state, currentPlayer, handPos, *bonus);
        -: 1279:
        -: 1280:    case steward:
    #####: 1281:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1282:        {
        -: 1283:            //+2 cards
    #####: 1284:            drawCard(currentPlayer, state);
    #####: 1285:            drawCard(currentPlayer, state);
    #####: 1286:        }
    #####: 1287:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1288:        {
        -: 1289:            //+2 coins
    #####: 1290:            state->coins = state->coins + 2;
    #####: 1291:        }
        -: 1292:        else
        -: 1293:        {
        -: 1294:            //trash 2 cards in hand
    #####: 1295:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1296:            discardCard(choice3, currentPlayer, state, 1);
        -: 1297:        }
        -: 1298:
        -: 1299:        //discard card from hand
    #####: 1300:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1301:        return 0;
        -: 1302:
        -: 1303:    case tribute:
    #####: 1304:        return playTribute(state, currentPlayer, handPos, &tributeRevealedCards[2], nextPlayer, *bonus);
        -: 1305:
        -: 1306:    case ambassador:
    #####: 1307:        return playAmbassador(choice1, choice2, state, currentPlayer, handPos);
        -: 1308:
        -: 1309:    case cutpurse:
        -: 1310:
    #####: 1311:        updateCoins(currentPlayer, state, 2);
    #####: 1312:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1313:        {
    #####: 1314:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1315:            {
    #####: 1316:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1317:                {
    #####: 1318:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1319:                    {
    #####: 1320:                        discardCard(j, i, state, 0);
    #####: 1321:                        break;
        -: 1322:                    }
    #####: 1323:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1324:                    {
    #####: 1325:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1326:                        {
        -: 1327:                            if (DEBUG)
        -: 1328:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1329:                        }
    #####: 1330:                        break;
        -: 1331:                    }
    #####: 1332:                }
    #####: 1333:            }
    #####: 1334:        }
        -: 1335:
        -: 1336:        //discard played card from hand
    #####: 1337:        discardCard(handPos, currentPlayer, state, 0);
        -: 1338:
    #####: 1339:        return 0;
        -: 1340:
        -: 1341:    case embargo:
        -: 1342:        //+2 Coins
    #####: 1343:        state->coins = state->coins + 2;
        -: 1344:
        -: 1345:        //see if selected pile is in play
    #####: 1346:        if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1347:        {
    #####: 1348:            return -1;
        -: 1349:        }
        -: 1350:
        -: 1351:        //add embargo token to selected supply pile
    #####: 1352:        state->embargoTokens[choice1]++;
        -: 1353:
        -: 1354:        //trash card
    #####: 1355:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1356:        return 0;
        -: 1357:
        -: 1358:    case outpost:
        -: 1359:        //set outpost flag
    #####: 1360:        state->outpostPlayed++;
        -: 1361:
        -: 1362:        //discard card
    #####: 1363:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1364:        return 0;
        -: 1365:
        -: 1366:    case salvager:
        -: 1367:        //+1 buy
    #####: 1368:        state->numBuys++;
        -: 1369:
    #####: 1370:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1371:        {
        -: 1372:            //gain coins equal to trashed card
    #####: 1373:            state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1374:            //trash card
    #####: 1375:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1376:        }
        -: 1377:
        -: 1378:        //discard card
    #####: 1379:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1380:        return 0;
        -: 1381:
        -: 1382:    case sea_hag:
    #####: 1383:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1384:        {
    #####: 1385:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1386:            {
    #####: 1387:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1388:                state->deckCount[i]--;
    #####: 1389:                state->discardCount[i]++;
    #####: 1390:                state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
    #####: 1391:            }
    #####: 1392:        }
    #####: 1393:        return 0;
        -: 1394:
        -: 1395:    case treasure_map:
        -: 1396:        //search hand for another treasure_map
    #####: 1397:        index = -1;
    #####: 1398:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1399:        {
    #####: 1400:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1401:            {
    #####: 1402:                index = i;
    #####: 1403:                break;
        -: 1404:            }
    #####: 1405:        }
    #####: 1406:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1407:        {
        -: 1408:            //trash both treasure cards
    #####: 1409:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1410:            discardCard(index, currentPlayer, state, 1);
        -: 1411:
        -: 1412:            //gain 4 Gold cards
    #####: 1413:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1414:            {
    #####: 1415:                gainCard(gold, state, 1, currentPlayer);
    #####: 1416:            }
        -: 1417:
        -: 1418:            //return success
    #####: 1419:            return 1;
        -: 1420:        }
        -: 1421:
        -: 1422:        //no second treasure_map found in hand
    #####: 1423:        return -1;
        -: 1424:    }
        -: 1425:
    #####: 1426:    return -1;
    #####: 1427:}
        -: 1428:
function discardCard called 2 returned 100% blocks executed 75%
        -: 1429:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1430:{
        -: 1431:
        -: 1432:    //refernced from Piazza post "Game Logic Flaw: Where is the trash pile?" by Kitch McKaen Kelly
        -: 1433:    //if card is not trashed, added to Played pile
        2: 1434:    if (trashFlag == 0)
branch  0 taken 100%
branch  1 taken 0%
        -: 1435:    {
        -: 1436:        //add card to played pile
        -: 1437:
        2: 1438:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][handPos];
        2: 1439:        state->discardCount[currentPlayer]++;
        2: 1440:    }
        -: 1441:
        -: 1442:    //if trash flag is set, added to thrash pile
        -: 1443:    else
        -: 1444:    {
        -: 1445:        //add card to trash pile
    #####: 1446:        state->thrashPile[state->thrashPileCount] = state->hand[currentPlayer][handPos];
    #####: 1447:        state->thrashPileCount++;
        -: 1448:    }
        -: 1449:
        -: 1450:    //set played card to -1
        2: 1451:    state->hand[currentPlayer][handPos] = -1;
        -: 1452:
        -: 1453:    //if discarded card is not the last card in the player's hand or the only card in the player's hand -> move cards up to fill gap
        3: 1454:    if ((handPos != (state->handCount[currentPlayer] - 1)) && (state->handCount[currentPlayer] != 1))
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 100%
branch  3 taken 0%
        -: 1455:    {
        -: 1456:        //need to maintain hand order -> set hand[p] = hand[p+1]
        2: 1457:        for (int p = handPos; p < state->handCount[currentPlayer]; p++)
branch  0 taken 0%
branch  1 taken 100%
        -: 1458:        {
    #####: 1459:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
    #####: 1460:        }
        1: 1461:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1: 1462:    }
        -: 1463:
        -: 1464:    //reduce number of cards in hand
        2: 1465:    state->handCount[currentPlayer]--;
        -: 1466:
        2: 1467:    return 0;
        -: 1468:}
        -: 1469:
function gainCard called 1 returned 100% blocks executed 72%
        -: 1470:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1471:{
        -: 1472:    //Note: supplyPos is enum of choosen card
        -: 1473:
        -: 1474:    //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1475:    if (supplyCount(supplyPos, state) < 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1476:    {
    #####: 1477:        return -1;
        -: 1478:    }
        -: 1479:
        -: 1480:    //added card for [whoseTurn] current player:
        -: 1481:    // toFlag = 0 : add to discard
        -: 1482:    // toFlag = 1 : add to deck
        -: 1483:    // toFlag = 2 : add to hand
        -: 1484:
        1: 1485:    if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1486:    {
    #####: 1487:        state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1488:        state->deckCount[player]++;
    #####: 1489:    }
        1: 1490:    else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1491:    {
    #####: 1492:        state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1493:        state->handCount[player]++;
    #####: 1494:    }
        -: 1495:    else
        -: 1496:    {
        1: 1497:        state->discard[player][state->discardCount[player]] = supplyPos;
        1: 1498:        state->discardCount[player]++;
        -: 1499:    }
        -: 1500:
        -: 1501:    //decrease number in supply pile
        1: 1502:    state->supplyCount[supplyPos]--;
        -: 1503:
        1: 1504:    return 0;
        1: 1505:}
        -: 1506:
function updateCoins called 2 returned 100% blocks executed 85%
        -: 1507:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1508:{
        -: 1509:    int i;
        -: 1510:
        -: 1511:    //reset coin count
        2: 1512:    state->coins = 0;
        -: 1513:
        -: 1514:    //add coins for each Treasure card in player's hand
       24: 1515:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1516:    {
       10: 1517:        if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1518:        {
        8: 1519:            state->coins += 1;
        8: 1520:        }
        2: 1521:        else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1522:        {
    #####: 1523:            state->coins += 2;
    #####: 1524:        }
        2: 1525:        else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1526:        {
    #####: 1527:            state->coins += 3;
    #####: 1528:        }
       10: 1529:    }
        -: 1530:
        -: 1531:    //add bonus
        2: 1532:    state->coins += bonus;
        -: 1533:
        -: 1534:    //reset to 0 once added to current state
        2: 1535:    bonus = 0;
        -: 1536:
        2: 1537:    return 0;
        -: 1538:}
        -: 1539:
        -: 1540://end of dominion.c
